import pytesseract
import cv2
import pyttsx3
import threading
import time
import numpy as np

# Initialize TTS engine
engine = pyttsx3.init()
engine.setProperty('rate', 150)  # Adjust speech rate for clarity

# Open webcam
webcam = cv2.VideoCapture(0)
webcam.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)  # Increase resolution
webcam.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

print("Live OCR with Audio Output. Press 'q' to quit.")

# Variable to store the last detected text
last_text = ""

def preprocess_frame(frame):
    """Preprocess the frame for better OCR accuracy."""
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # Remove noise and smooth the image
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    # Adaptive thresholding for better text extraction
    processed = cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
    return processed

def speak_text(text):
    """Threaded function to speak text using pyttsx3."""
    engine.say(text)
    engine.runAndWait()

while True:
    try:
        # Capture frame from webcam
        ret, frame = webcam.read()
        if not ret:
            print("Failed to capture image from webcam.")
            break

        # Preprocess the frame
        processed_frame = preprocess_frame(frame)

        # Perform OCR on the processed frame
        config = r'--oem 3 --psm 4'  # Optimize for paragraph detection
        text = pytesseract.image_to_string(processed_frame, config=config).strip()

        # If new text is detected, process it
        if text and text != last_text:
            print("Text Detected:")
            print(text)
            last_text = text  # Update the last detected text
            
            # Speak the detected text in a separate thread
            threading.Thread(target=speak_text, args=(text,)).start()

        # Display the live webcam feed with detected text overlay
        overlay_frame = frame.copy()
        cv2.putText(overlay_frame, "Press 'q' to quit", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.imshow("Live OCR Feed", overlay_frame)

        # Quit the program when 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            print("Exiting the program.")
            break

    except KeyboardInterrupt:
        print("\nProgram interrupted by user.")
        break

# Release resources
webcam.release()
cv2.destroyAllWindows()
