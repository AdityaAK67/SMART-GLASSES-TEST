import cv2
import pytesseract
import pyttsx3
import threading
from gpiozero import AngularServo
import time

# Initialize Servo
servo = AngularServo(18, initial_angle=0, min_pulse_width=0.0006, max_pulse_width=0.0023)

# Initialize TTS Engine
engine = pyttsx3.init()
engine.setProperty('rate', 125)  # Normal speech speed

# Load Object Detection Model
classNames = []
classFile = "/home/pi/Desktop/Object_Detection_Files/coco.names"
with open(classFile, "rt") as f:
    classNames = f.read().rstrip("\n").split("\n")

configPath = "/home/pi/Desktop/Object_Detection_Files/ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt"
weightsPath = "/home/pi/Desktop/Object_Detection_Files/frozen_inference_graph.pb"

net = cv2.dnn_DetectionModel(weightsPath, configPath)
net.setInputSize(320, 320)
net.setInputScale(1.0 / 127.5)
net.setInputMean((127.5, 127.5, 127.5))
net.setInputSwapRB(True)

# Function to Detect Objects and Provide Audio Output
def object_detection(img):
    global last_detected_object
    classIds, confs, bbox = net.detect(img, confThreshold=0.45, nmsThreshold=0.2)
    if len(classIds) != 0:
        for classId, confidence, box in zip(classIds.flatten(), confs.flatten(), bbox):
            className = classNames[classId - 1]
            if className in ['cup', 'horse']:  # Specify target objects
                # Draw box and label on the frame
                cv2.rectangle(img, box, color=(0, 255, 0), thickness=2)
                cv2.putText(img, className.upper(), (box[0] + 10, box[1] + 30),
                            cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)
                cv2.putText(img, str(round(confidence * 100, 2)), (box[0] + 200, box[1] + 30),
                            cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)

                # Speak the detected object
                if last_detected_object != className:  # Avoid repeating the same object
                    last_detected_object = className
                    engine.say(f"I see a {className}")
                    engine.runAndWait()

                # Move the servo
                servo.angle = -90
                time.sleep(2)
                servo.angle = 90

# Function to Perform OCR and Provide Audio Output
def ocr_live(img):
    global last_detected_text
    # Convert to grayscale for OCR
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Perform OCR
    text = pytesseract.image_to_string(gray, config='--psm 6').strip()

    if text and text != last_detected_text:  # Avoid repeating the same text
        last_detected_text = text
        print("OCR Text Detected:", text)
        engine.say("Detected text")
        engine.say(text)
        engine.runAndWait()

# Main Function to Capture Video and Process Both Tasks
if __name__ == "__main__":
    cap = cv2.VideoCapture(0)
    cap.set(3, 640)  # Set resolution
    cap.set(4, 480)

    last_detected_object = None
    last_detected_text = None

    while True:
        success, frame = cap.read()
        if not success:
            print("Failed to capture video")
            break

        # Create threads for object detection and OCR
        obj_thread = threading.Thread(target=object_detection, args=(frame,))
        ocr_thread = threading.Thread(target=ocr_live, args=(frame,))

        # Start both threads
        obj_thread.start()
        ocr_thread.start()

        # Wait for threads to complete
        obj_thread.join()
        ocr_thread.join()

        # Display the video feed
        cv2.imshow("Live Feed", frame)

        # Quit on 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
